name: Multi-Environment Deployment
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - mini
        - ai
        - full
        - custom
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      auto_approve:
        description: 'Auto-approve apply/destroy'
        required: false
        default: false
        type: boolean

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }} - ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.8"

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Prepare environment variables
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: | 
          echo "ARM_CLIENT_ID=$( jq -r '.clientId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_CLIENT_SECRET=$( jq -r '.clientSecret' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_SUBSCRIPTION_ID=$( jq -r '.subscriptionId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV;
          echo "ARM_TENANT_ID=$( jq -r '.tenantId' <<< $AZURE_CREDENTIALS )" >> $GITHUB_ENV
        shell: bash

      - name: Open firewall of the TF State Storage Account
        env:
          SA_STATE: ${{ secrets.SA_STATE }}
        run: |
          sa=($(echo $SA_STATE  | tr "/" "\n"))
          az account set --subscription "${sa[1]}"
          az storage account update --resource-group "${sa[3]}" --name "${sa[7]}" --public-network-access Enabled
        shell: bash

      - name: Terraform Init
        run: terraform -chdir=demo init

      - name: Terraform Validate
        run: terraform -chdir=demo validate -no-color

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        env:
          TF_VAR_additional_access_policy_object_ids: ${{ vars.ADDITIONAL_ACCESS_POLICY_OBJECT_IDS }}
          TF_VAR_subscription_id: ${{ vars.ARM_SUBSCRIPTION_ID }}
        run: |
          terraform -chdir=demo plan -var-file="${{ github.event.inputs.environment }}.tfvars" -no-color

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        env:
          TF_VAR_additional_access_policy_object_ids: ${{ vars.ADDITIONAL_ACCESS_POLICY_OBJECT_IDS }}
          TF_VAR_subscription_id: ${{ vars.ARM_SUBSCRIPTION_ID }}
        run: |
          if [ "${{ github.event.inputs.auto_approve }}" == "true" ]; then
            terraform -chdir=demo apply -var-file="${{ github.event.inputs.environment }}.tfvars" -auto-approve -no-color
          else
            echo "Manual approval required. Please run the workflow with auto_approve=true to apply changes."
            exit 1
          fi

      - name: Terraform Destroy Plan
        if: github.event.inputs.action == 'destroy'
        env:
          TF_VAR_additional_access_policy_object_ids: ${{ vars.ADDITIONAL_ACCESS_POLICY_OBJECT_IDS }}
          TF_VAR_subscription_id: ${{ vars.ARM_SUBSCRIPTION_ID }}
        run: |
          terraform -chdir=demo plan -destroy -var-file="${{ github.event.inputs.environment }}.tfvars" -no-color

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy' && github.event.inputs.auto_approve == 'true'
        env:
          TF_VAR_additional_access_policy_object_ids: ${{ vars.ADDITIONAL_ACCESS_POLICY_OBJECT_IDS }}
          TF_VAR_subscription_id: ${{ vars.ARM_SUBSCRIPTION_ID }}
        run: |
          terraform -chdir=demo destroy -var-file="${{ github.event.inputs.environment }}.tfvars" -auto-approve -no-color

      - name: Generate deployment summary
        if: github.event.inputs.action == 'apply' && success()
        run: |
          echo "## Deployment Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** âœ… Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          
          # Get outputs
          terraform -chdir=demo output -json > outputs.json
          echo "### Terraform Outputs" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat outputs.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Close firewall of the TF State Storage Account
        if: always()
        env:
          SA_STATE: ${{ secrets.SA_STATE }}
        run: |
          sa=($(echo $SA_STATE  | tr "/" "\n"))
          az storage account update --resource-group "${sa[3]}" --name "${sa[7]}" --public-network-access Disabled
        shell: bash
